###########################
#  Configuration
###########################

set-window-option -g mode-keys vi
set -g default-terminal "screen-256color"

# decrease command delay (increases vim responsiveness)
set -sg escape-time 0

# increase repeat time for repeatable commands
set -g repeat-time 1000

# don't change window title automatically
set-option -g allow-rename off

# set zsh as default shell
set-option -g default-shell /bin/zsh

###########################
# KEY BINDINGS
###########################

# Change prefix from default (C-b) to C-a
# C-a doesn't interfere with emacs-style editing keys
unbind -n C-b
unbind -n C-a
set -g prefix C-a

# C-a C-a to passthrough a C-a
unbind C-a
bind C-a send-key C-a

# Toggle mouse on
bind M \
    set -g mouse-resize-pane on \;\
    display 'Mouse: ON'

# Toggle mouse off
bind m \
    set -g mouse-resize-pane off \;\
    display 'Mouse: OFF'

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
#bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# save C-l binding for clearing the screen
bind C-l send-keys 'C-l'

# alt-shift + vi movement for windows switching
bind -n S-h previous-window
bind -n S-l next-window
bind -r h previous-window
bind -r l next-window

# window splitting
#bind - split-window -v
#bind | split-window -h
bind s split-window -v
bind v split-window -h
# unbind %
# unbind '"'

# Use vim type keys for re-sizing panes
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1
bind -r - resize-pane -D 1
bind -r + resize-pane -U 1

#edit mode vi bindings
bind -t vi-copy v begin-selection # Begin selection in copy mode.
bind -t vi-copy y copy-selection # Yank selection in copy mode
bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard' # Copy to the system clipboard
bind -t vi-copy Escape cancel

# last window shortcut from screen
bind C-a last-window

# Allows us to use C-a a <command> to send commands to a TMUX session inside 
# another TMUX session
bind a send-prefix

###########################
#  Colors
###########################

# tmuxline snapshot
if-shell "test -f ~/.tmuxline" "source ~/.tmuxline"
